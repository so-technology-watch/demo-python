from bottle import get, post, put, delete, request, route, response, hook
from services import ${entity.name}_service as commons_entity_service
from jsonSerializer.${entity.name}JsonSerializer import ${entity.name}JsonSerializer
import json

${entity.name.toLowerCase()}_service = commons_entity_service.${entity.name}Service("${entity.name}")
json_serializer = ${entity.name}JsonSerializer()


@hook('after_request')
def init_response():
    response.content_type = 'application/json'
    response.headers['Access-Control-Allow-Origin'] = '*'


@route('/<>', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/<>/<>', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/<>/<>/<>', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/<>/', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/<>/<>/', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/<>/<>/<>/', method=['GET', 'POST', 'PUT', 'DELETE'])
@route('/', method=['GET', 'POST', 'PUT', 'DELETE'])
def error_400():
    response.status = 400


@get('/api/v1/${entity.name.toLowerCase()}')
def get_all():
    try:
        entities = ${entity.name.toLowerCase()}_service.find_all()
        result = [json_serializer.to_json(entity) for entity in entities]
        response.status = 200
        return json.dumps(result)
    except TypeError as e:
        print(e)
        response.status = 500
        return {"error": 500, "error_description": "{}".format(e)}
 

#if($entity.hasCompositePrimaryKey())
@get('/api/v1/${entity.name.toLowerCase()}/$entity.keyAttributesNamesAsString('/', '<', '>')')
def get_by_id($entity.keyAttributesNamesAsString(', ')):
#else
@get('/api/v1/${entity.name.toLowerCase()}/<$entity.keyAttributesNamesAsString('')>')
def get_by_id($entity.keyAttributesNamesAsString('')):
#end
    try:
#if(! $entity.hasCompositePrimaryKey())
        result = ${entity.name.toLowerCase()}_service.find_by_id($entity.keyAttributesNamesAsString(''))
#else
        result = ${entity.name.toLowerCase()}_service.find_by_id($entity.keyAttributesNamesAsString(', '))
#end        
        if result['code'] == 200:
            if result['entity']:
                response.status = 200
                return json_serializer.to_json(result['entity'])
            else:
                response.status = 404
        else:
            response.status = 400
    except TypeError as e:
        print(e)
        response.status = 500
        return {"error": 500, "error_description": "{}".format(e)}


@post('/api/v1/${entity.name.toLowerCase()}')
def create():
    try:
        body = request.body
        if body:
            body_str = body.read().decode('utf-8')
            entity = json_serializer.from_json(body_str)
            result = ${entity.name.toLowerCase()}_service.insert(entity)
            if result['code'] == 201:
                response.status = 201
                return json_serializer.to_json(entity)
            if result['code'] == 409:
                response.status = 409
            else:
                response.status = 500
                return {"error": 500, "error_description": "{}".format(result['message'])}
        else:
            response.status = 400
    except TypeError as e:
        print(e)
        response.status = 500
        return {"error": 500, "error_description": "{}".format(e)}


#if($entity.hasCompositePrimaryKey())
@put('/api/v1/${entity.name.toLowerCase()}/$entity.keyAttributesNamesAsString('/', '<', '>')')
def update($entity.keyAttributesNamesAsString(', ')):
#else
@put('/api/v1/${entity.name.toLowerCase()}/<$entity.keyAttributesNamesAsString('')>')
def update($entity.keyAttributesNamesAsString('')):
#end
    try:
        body = request.body
        if body:
            body_str = body.read().decode('utf-8')
            entity = json_serializer.from_json(body_str)
#set( $condition = "" )
#foreach($field in $entity.keyAttributes) 
#set( $type_id = ${field.databaseType.toLowerCase()})
#if( $foreach.count < $entity.keyAttributes.size() )
#set( $condition = $condition + "entity." + $field.name + " == ${type_id}($field.name)" + " and ")
#else
#set( $condition = $condition + "entity." + $field.name + " == ${type_id}($field.name)")
#end
#end
            if ${condition}:
                result = ${entity.name.toLowerCase()}_service.update(entity)
                if result['code'] == 200:
                    response.status = 200
                    return json_serializer.to_json(result['entity'])
                if result['code'] == 201:
                    response.status = 201
                    return json_serializer.to_json(result['entity'])
                else:
                    response.status = 500
                    return {"error": 500, "error_description": "{}".format(result['message'])}
            else:
                response.status = 400
        else:
            response.status = 400
    except TypeError as e:
        print(e)
        response.status = 500
        return {"error": 500, "error_description": "{}".format(e)}


#if($entity.hasCompositePrimaryKey())
@delete('/api/v1/${entity.name.toLowerCase()}/$entity.keyAttributesNamesAsString('/', '<', '>')')
def delete($entity.keyAttributesNamesAsString(', ')):
#else
@delete('/api/v1/${entity.name.toLowerCase()}/<$entity.keyAttributesNamesAsString('')>')
def delete($entity.keyAttributesNamesAsString('')):
#end
    try:
#if(! $entity.hasCompositePrimaryKey())
        result = ${entity.name.toLowerCase()}_service.delete_by_id($entity.keyAttributesNamesAsString(''))
#else
        result = ${entity.name.toLowerCase()}_service.delete_by_id($entity.keyAttributesNamesAsString(', '))
#end
        if result['code'] == 204:
            if result['entity']:
                response.status = 204
            else:
                response.status = 404
        else:
            response.status = 400
    except TypeError as e:
        print(e)
        response.status = 500
        return {"errorCode": 500, "message": "Internal Server Error"}


@get('/api/v1/${entity.name.toLowerCase()}.count')
def count():
    try:
        result = ${entity.name.toLowerCase()}_service.count_all()
        if type(result) == int:
            response.status = 200
            return {"count": result}
        else:
            response.status = 500
            return {"error": 500, "error_description": "{}".format(result)}
    except TypeError as e:
        print(e)
        response.status = 400
