import commons.generic_dao as dao_commons
from entities.${entity.name} import ${entity.name}


class ${entity.name}Service:
    def __init__(self, entity):
        self.dao = dao_commons.GenericDao(entity, ${entity.name})

#if(! $entity.hasCompositePrimaryKey() )
    def find_by_id(self, $entity.keyAttributesNamesAsString('')):
#else
    def find_by_id(self, $entity.keyAttributesNamesAsString(', ')):
#end
        """
        Tries to find an entity using its Id / Primary Key
        :param _id:
        :return: entity
        """
#if(! $entity.hasCompositePrimaryKey() )
        request = build_query($entity.keyAttributesNamesAsString(''))
#else
        request = build_query($entity.keyAttributesNamesAsString(', '))
#end
        query = sqlalchemy_query(request)
        return self.dao.do_select(query)

    def find_all(self):
        """
        Finds all entities.
        :return:  all entities
        """
        return self.dao.do_select_all()

    def insert(self, entity):
        """
        Insert the given entity in the database
        :param entity: to be inserted (supposed to have a valid Id/PK )
        :return: entity
        """
#if(! $entity.hasCompositePrimaryKey() )
        request = build_query(entity.$entity.keyAttributesNamesAsString(''))
#else 
        request = build_query($entity.keyAttributesNamesAsString(', ', 'entity.', ''))
#end
        query = sqlalchemy_query(request)
        return self.dao.do_insert(entity, query)

    def update(self, entity):
        """
        Updates the given entity in the database
        :param entity: to be updated (supposed to have a valid Id/PK )
        :return: true if the entity has been updated, false if not found and not updated
        """
#if(! $entity.hasCompositePrimaryKey() )
        request = build_query(entity.$entity.keyAttributesNamesAsString(''))
#else
        request = build_query($entity.keyAttributesNamesAsString(', ', 'entity.', ''))
#end
        query = sqlalchemy_query(request)
        return self.dao.do_update(entity, query)

#if(! $entity.hasCompositePrimaryKey() )
    def delete_by_id(self, $entity.keyAttributesNamesAsString('')):
#else
    def delete_by_id(self, $entity.keyAttributesNamesAsString(', ')):
#end
        """
        Deletes an entity using its Id / Primary Key
        :param _id:
        :return: true if the entity has been deleted, false if not found and not deleted
        """
#if(! $entity.hasCompositePrimaryKey() )
        request = build_query($entity.keyAttributesNamesAsString(''))
#else
        request = build_query($entity.keyAttributesNamesAsString(', '))
#end
        query = sqlalchemy_query(request)
        return self.dao.do_delete(query)

    def count_all(self):
        """
        Counts all the entity present in the entity table
        :return: the number of rows in the entity table
        """
        return self.dao.do_count_all()


#if(! $entity.hasCompositePrimaryKey() )
def build_query($entity.keyAttributesNamesAsString('')):
#else
def build_query($entity.keyAttributesNamesAsString(', ')):
#end
#set( $cpt = 0 )
    return {
#foreach($field in $entity.keyAttributes)
#set( $cpt = $cpt + 1)
        "id_$cpt": '${entity.name}.$field.name == {}'.format($field.name),
#end
    }


def sqlalchemy_query(request):
        cpt = 0
        query = ""
        for value in request:
            cpt = cpt + 1
            if cpt < len(request):
                query = query + request[value] + " and "
            else:
                query = query + request[value]
        return query
